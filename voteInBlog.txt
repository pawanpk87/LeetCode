Functions of the VoteIn App

Admin

  1.) User(voters) Management
  2.) Candidate(Leaders) Management
  3.) Election Result

Voters

  1.)registration    
  2.)voting



VoteIn application will be handle by one addmin so it's important to 
understand the admin module befor voting.

Every users either voters or candidate will have to first register as 
voters, now admin is the one who is responsible for adding user to
candidate list.

Example:
	Name: Rahul Gandhi
	Adhar number: ....

	now Rahul gandhi wants to become candidate of the election
	then admin will add Rahul Gandhi to Candidate list.


Admin Preveledges:-
	
	1.) User(voters) Management
		a.) Show Users
		b.) Remove Users
		c.) Update Users
	
	2.) Candidate Management
		a.) Add Candidate
		b.) Update Candidate Details
		c.) Remove Candidate 
		d.) Show Candidate
	
	3.) Election Result


In-order to vote (voters) have to register first
using their adhar number.



After registration users(voters) will be redirected to login page once
the will loged in, then they will be redirected to voting page where 
all candidate who are in same city as user(voter) will be persent
, now user can vote any one.


after voting user will get acknowledgement for voting.


Thats how VoteIn work.




---------------------------------BLOG--------------------------------------

Befor we start this project, we have used MVC Architecture so it's very important 
to upderstand MVC Architecture first.

What is MVC Architecture:-
-------------------------







Prerequisites:-
--------------
	1.) J2EE/Jakarta EE
	2.) JavaScript
	3.) HTML/CSS
    4.) jQuery
    5.) Ajax
	6.) JDBC(Java Database Connectivity)
	7.) Oracle Databse 
	8.) SQL



Let's first create a project, after that  in source Packages we will create 4 packages:-
	1.) controller
	2.) dao 
	3.) dbutil
	4.) dto

	 
1.) VoteIn/contoller:- It will contain all the classes in which we will be 	
writing actual businees logic.(in simple word it will fetch the data from 
database using dao classes and procces it and send the response to the client).

2.) VoteIn/dao:- It will contain all classes which is responsible for fetching 
the data from database.

3.) VoteIn/dbutil:- It will contain only one calss which is responsible 
for establishig connectivity to the databse.

4.) VoteIn/dto:- It will contain all the classes which will help dao or 
controller to exchange the data.

It will look like this:-






since we will be using jquery, so we need to download the jQuery code and put it in jsscript 
folder in our project.

you can download the jQuery codes from here [https://jquery.org];






now let's first establishig connectivity to the databse.

We can establishig connection to database every time whenever user
make a request, but this is not good practice so we don't want to 
establishig connection to database for every user, we want only once.

so it there any way to run  database connectivity code only once ?
answer:- yes, It's static block

Static Block say's that it will run only once whenever we will use
the class first time (means calling static funtion or creating object
of that class).

now let's put database connectivity code to static block.


static{
    try{
        Class.forName("oracle.jdbc.OracleDriver");

        conn=DriverManager.getConnection("jdbc:oracle:thin:@//divice_address:1521/xe", "VoteIn", "VoteIn");           
    }
    catch(ClassNotFoundException cnf)
    {
        cnf.printStackTrace();
    }
    catch(SQLException sqlex)
    {
        sqlex.printStackTrace();
    }
}


next create static funtion getConnection so that whenever we need
connection object we can call this funtion

public static Connection getConnection()
{
    return conn;
}


next create closeConnection class for closing connection

public static void closeConnection()
{
    try{
        if(conn != null)
        {
            conn.close();
        }
    }
    catch(SQLException sqlex)
    {
        sqlex.printStackTrace();
    }
}


DBConnection class:-
------------------

package VoteIn.dbutil;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;


public class DBConnection {
    
    private static Connection conn=null;
    
    static{
        try{
            Class.forName("oracle.jdbc.OracleDriver");

            conn=DriverManager.getConnection("jdbc:oracle:thin:@//divice_address:1521/xe", "VoteIn", "VoteIn");           
        }
        catch(ClassNotFoundException cnf)
        {
            cnf.printStackTrace();
        }
        catch(SQLException sqlex)
        {
            sqlex.printStackTrace();
        }
    }
    
    public static Connection getConnection()
    {
        return conn;
    }
    
    public static void closeConnection()
    {
        try{
            if(conn != null)
            {
                conn.close();
            }
        }
        catch(SQLException sqlex)
        {
            sqlex.printStackTrace();
        }
    }
}


----------------------
Registration Module  |
----------------------
    ____________________________
    |                          |    
    |    registeration.html    |
    |                          |
    |    registeration form    |
    |                          |
    |                          |
    |    Register button       |
    |__________________________|
                |
                |
                |
       call the addUser() funtion
       of registeration.js
                |
                |
               \ /  
    ____________________________
    |                          |    
    |    registeration.js      |
    |                          |
    |    addUser() Functions   |
    |                          |
    |__________________________|
                |
                |
                |
       make post request to
       RegistrationControllerServlet
                |
                |
               \ / 
    _________________________________________
    |                                       |    
    |  RegistrationControllerServlet.java   |
    |                                       |
    |    1.) fetch the from data            |
    |    2.) checks the user in             |
    |        database                       |    
    |          a.) if user is not present   |
    |              in databse then          |
    |              register                 |
    |          b.) if user is already       |
    |              present then response    |
    |              user is already          |
    |              registered               |
    |                                       |
    |_______________________________________|
                        |
                        |
       RegistrationControllerServlet call
       registerUser() Functions of register the 
       user 
                        |
                        |
                       \ / 
             __________________________
            |                          |    
            |    RegistrationDAO.java  |
            |                          |
            |    registerUser()        |
            |    Functions register    |
            |    user                  |
            |__________________________|     
                        |
                        |
       registerUser send response to the
       RegistrationControllerServlet and
       RegistrationControllerServlet forward 
       the request to the registrationresponse.jsp 
       to generate response
                        |
                        |
                       \ / 
           finally registrationresponse.jsp
           send the response to the client
                        



Create simple registeration form in register.html and provide button Register. 

<div class="form">
    <input type="text" id="username" class="form-field animation a3" placeholder="User name" />

    <input type="password" id="password" class="form-field animation a4" placeholder="Password" />

    <input type="password" id="cpassword" class="form-field animation a4" placeholder="Confirm Password" />

    <input type="text" id="adhar" class="form-field animation a4" placeholder="Adhar number" />

    <input type="email" id="email" class="form-field animation a3" placeholder="Email Address" />

    <input type="text" id="mobile" class="form-field animation a4" placeholder="Mobile number" />

    <input type="text" id="address" class="form-field animation a4" placeholder="Address" />

    <input type="text" id="city" class="form-field animation a4" placeholder="City" />

    <button class="animation a6" onclick="addUser()">Register</button>
</div>


now when user will click the Register button addUser() funtion will run and
it will make a request to the RegistrationControllerServlet.


addUser():-
---------
        1.) first create neccessary variables

            let username, password, cpassword, city, address, adhar, email, mobile;

        2.) fetch the data

            username=$("#username").val();
            password=$("#password").val();
            cpassword=$("#cpassword").val();
            city=$("#city").val();
            address=$("#address").val();
            adhar=$("#adhar").val();
            email=$("#email").val();
            mobile=$("#mobile").val();

        3.) make validateUser() funtion for validating input

            function validateUser()
            {
                if(username === "" || password === "" || 
                cpassword === "" || city === "" || 
                address === "" || adhar === "" || 
                email === "" || mobile === "")
                {
                    swal("Error!","All fields are mandatory","error");
                    return false;
                }
                
                return true;
            }

        4.) check password

            if(password !== cpassword)
            {
                swal("Error!","Password do not match","error");
                return;
            }
        
        5.) create checkEmail() function for validating emails

            function checkEmail()
            {
                let attheratepos=email.indexOf("@");
                let dotpos=email.indexOf(".");
                
                if(attheratepos < 1 || dotpos < (attheratepos+2) || dotpos+2 >= email.length)
                {
                    swal("Error!","Please enter a valid email","error");
                    return false;
                }
                
                return true;
            }

        6.) create checkMobile() function for validating mobile number

            function checkMobile()
            {
                let found=true;
                
                for(let i=0; i<mobile.length; i++)
                {
                    if((mobile[i] >= '0' && mobile[i] <= '9') ==false)
                    {
                        found=false;
                    }
                }
                
                if(found == false)
                {
                    swal("Error!","mobile number should contain only digits","error");
                    return false;
                }
                
                if(mobile.length > 10 || mobile.length < 10)
                {
                    swal("Error!","Please use a 10 digit mobile number","error");
                    return false;
                }
                
                return true;
            }

        7.) create data object 

            let data={
                username:username,
                password:password,
                city:city,
                address:address,
                userid:adhar,
                email:email,
                mobile:mobile
            };

        8.) make a post request to RegistrationControllerServlet

            let xhr=$.post("RegistrationControllerServlet",data,processresponse).fail(handleError);







----------------------------registeration.js------------------------------------

    
            let username, password, cpassword, city, address, adhar, email, mobile;

            function addUser()
            {   
                username=$("#username").val();
                password=$("#password").val();
                cpassword=$("#cpassword").val();
                city=$("#city").val();
                address=$("#address").val();
                adhar=$("#adhar").val();
                email=$("#email").val();
                mobile=$("#mobile").val();
                
                if(validateUser())
                {
                    if(password !== cpassword)
                    {
                        swal("Error!","Password do not match","error");
                        return;
                    }
                    else
                    {
                        if(checkEmail() === false)
                            return;
                        
                        if(checkMobile() === false)
                            return;
                        
                        let data={
                            username:username,
                            password:password,
                            city:city,
                            address:address,
                            userid:adhar,
                            email:email,
                            mobile:mobile
                        };
                        
                        let xhr=$.post("RegistrationControllerServlet",data,processresponse).fail(handleError);
                    }
                }
            }

            function processresponse(responseText,textStatus,xhr)
            {
                let str=responseText.trim();
                if(str === "success")
                {
                    swal("Success!","Registration done successfully! You can now login","success");
                    
                    setTimeout(()=>{
                        window.location="login.html";
                    },3000);
                }
                else if(str === "uap")
                {
                    swal("Error!","Sorry! the userid is already present","error");
                }
                else
                {
                    swal("Error!","Registration Failed! Try again","error");
                }
            }

            function handleError(xhr)
            {  
                swal("Error!","Problem in server communication:"+xhr.statusText,"error");
            }

            function validateUser()
            {
                if(username === "" || password === "" || 
                cpassword === "" || city === "" || 
                address === "" || adhar === "" || 
                email === "" || mobile === "")
                {
                    swal("Error!","All fields are mandatory","error");
                    return false;
                }
                
                return true;
            }

            function checkMobile()
            {
                let found=true;
                
                for(let i=0; i<mobile.length; i++)
                {
                    if((mobile[i] >= '0' && mobile[i] <= '9') ==false)
                    {
                        found=false;
                    }
                }
                
                if(found == false)
                {
                    swal("Error!","mobile number should contain only digits","error");
                    return false;
                }
                
                if(mobile.length > 10 || mobile.length < 10)
                {
                    swal("Error!","Please use a 10 digit mobile number","error");
                    return false;
                }
                
                return true;
            }

            function checkEmail()
            {
                let attheratepos=email.indexOf("@");
                let dotpos=email.indexOf(".");
                
                if(attheratepos < 1 || dotpos < (attheratepos+2) || dotpos+2 >= email.length)
                {
                    swal("Error!","Please enter a valid email","error");
                    return false;
                }
                
                return true;
            }


----------------------------RegistrationControllerServlet.java------------------------------------


package VoteIn.controller;

import VoteIn.dao.RegistrationDAO;
import VoteIn.dto.UserDetails;
import java.io.IOException;
import java.sql.SQLException;
import java.util.stream.Collectors;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


public class RegistrationControllerServlet extends HttpServlet {

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        RequestDispatcher rdp=null;
        UserDetails user=new UserDetails();
        
        user.setUserId(request.getParameter("userid"));
        user.setUsername(request.getParameter("username"));
        user.setPassword(request.getParameter("password"));
        user.setAddress(request.getParameter("address"));
        user.setCity(request.getParameter("city"));
        user.setEmailId(request.getParameter("email"));
        user.setMobileNumber(request.getParameter("mobile"));
        
        try
        {
            boolean result=false, userFound=false;   
            
            if(!RegistrationDAO.searchUser(user.getUserId()))
            {
                result=RegistrationDAO.registerUser(user);
            }
            else
            {
                userFound=true;
            }
            
            request.setAttribute("result", result);
            request.setAttribute("userFound", userFound);
            request.setAttribute("username", user.getUsername());
                       
            rdp=request.getRequestDispatcher("registrationresponse.jsp");
        }
        catch(SQLException sqlex)
        {
            sqlex.printStackTrace();           
            rdp=request.getRequestDispatcher("showexception.jsp");
            request.setAttribute("Exception", sqlex);
        }
        finally{
            rdp.forward(request, response);
        }
    }
    
    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
}


----------------------------RegistrationDAO.java------------------------------------


package VoteIn.dao;

import VoteIn.dbutil.DBConnection;
import VoteIn.dto.UserDetails;
import java.sql.PreparedStatement;
import java.sql.SQLException;


public class RegistrationDAO {
    
    /*
    ps -> for checking is user present or not
    ps1-> for registration 
    */
    private static PreparedStatement ps,ps1;
    
    static
    {
        try{
            ps=DBConnection.getConnection().prepareStatement("Select * from user_details where adhar_no=?");
            
            ps1=DBConnection.getConnection().prepareStatement("Insert into user_details values(?,?,?,?,?,?,?,?)");
        }
        catch(SQLException sqlex)
        {
            sqlex.printStackTrace();
        }
    }
    
    public static boolean searchUser(String userId)throws SQLException 
    {
        /*
        here userId is same as adhar number
        */
        ps.setString(1, userId);
        return ps.executeQuery().next();
    }    
    
    public static boolean registerUser(UserDetails user) throws SQLException
    {
        ps1.setString(1, user.getUserId());
        ps1.setString(2, user.getPassword());
        ps1.setString(3, user.getUsername());
        ps1.setString(4, user.getAddress());
        ps1.setString(5,user.getCity());
        ps1.setString(6, user.getEmailId());
        ps1.setString(7, user.getMobileNumber());        
        ps1.setString(8, "Voter");
        
        return ps1.executeUpdate() == 1;
    }
}



----------------------------registrationresponse.jsp------------------------------------

<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%
   boolean result=(boolean)request.getAttribute("result");
   boolean userFound=(boolean)request.getAttribute("userFound");
   if(userFound == true)
        out.println("uap");
   else if(result == true)
        out.println("success");
   else
        out.println("failure");
%>



----------------------------UserDetails.java(DTO class)------------------------------------


package VoteIn.dto;

public class UserDetails {

    @Override
    public String toString() {
        return "UserDetails{" + "username=" + username + ", userId=" + userId + ", emailId=" + emailId + ", address=" + address + ", mobileNumber=" + mobileNumber + ", city=" + city + ", password=" + password + '}';
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public void setEmailId(String emailId) {
        this.emailId = emailId;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public void setMobileNumber(String mobileNumber) {
        this.mobileNumber = mobileNumber;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public String getUserId() {
        return userId;
    }

    public String getEmailId() {
        return emailId;
    }

    public String getAddress() {
        return address;
    }

    public String getMobileNumber() {
        return mobileNumber;
    }

    public String getCity() {
        return city;
    }

    public String getPassword() {
        return password;
    }

    public UserDetails(String username, String userId, String emailId, String address, String mobileNumber, String city, String password) {
        this.username = username;
        this.userId = userId;
        this.emailId = emailId;
        this.address = address;
        this.mobileNumber = mobileNumber;
        this.city = city;
        this.password = password;
    }
    
    public UserDetails() {
        
    }
    
    private String username;
    private String userId;
    private String emailId;
    private String address;
    private String mobileNumber;
    private String city;
    private String password;
}


after this user will be redirected to login.html page, now let's create 
Login module.


----------------
Login  Module  |
----------------



    ____________________________
    |                          |    
    |       login.html         |
    |                          |
    |       login form         |
    |                          |
    |                          |
    |       Login button       |
    |__________________________|
                |
                |
                |
       call the connectUser() 
       funtion of login.js
                |
                |
               \ /  
    ____________________________
    |                          |    
    |        login.js          |
    |                          |
    | connectUser() Functions  |
    |                          |
    |__________________________|
                |
                |
                |
       make request to
       LoginControllerServlet
                |
                |
               \ / 
    _________________________________________
    |                                       |    
    |     LoginControllerServlet.java       |
    |                                       |
    |    1.) fetch the from data            |
    |        (userid/password)              |
    |    2.) validateUser the user          |
    |        using userid and password      |    
    |          a.) if userid and password   |
    |              is valid then login      |
    |          b.) if userid and password   |
    |              is not valid then        |
    |              response userid and      |
    |              password invalid         |
    |                                       |
    |_______________________________________|
                        |
                        |
       LoginControllerServlet call
       validateUser() Functions of validating
       user
                        |
                        |
                       \ / 
             __________________________
            |                          |    
            |    UserDAO.java          |
            |                          |
            |    validateUser()        |
            |    Functions validate    |
            |    the user              |
            |__________________________|     
                        |
                        |
       validateUser send response to the
       LoginControllerServlet, and 
       LoginControllerServlet forward 
       the request to the loginresponse.jsp 
       to generate response
                        |
                        |
                       \ / 
           finally loginresponse.jsp
           send the response to the client







                        






